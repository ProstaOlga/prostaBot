/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import jooq.tables.Account;
import jooq.tables.records.AccountRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AccountDao extends DAOImpl<AccountRecord, jooq.tables.pojos.Account, Long> {

    /**
     * Create a new AccountDao without any configuration
     */
    public AccountDao() {
        super(Account.ACCOUNT, jooq.tables.pojos.Account.class);
    }

    /**
     * Create a new AccountDao with an attached configuration
     */
    @Autowired
    public AccountDao(Configuration configuration) {
        super(Account.ACCOUNT, jooq.tables.pojos.Account.class, configuration);
    }

    @Override
    public Long getId(jooq.tables.pojos.Account object) {
        return object.getTelegramId();
    }

    /**
     * Fetch records that have <code>telegram_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Account> fetchRangeOfTelegramId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Account.ACCOUNT.TELEGRAM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>telegram_id IN (values)</code>
     */
    public List<jooq.tables.pojos.Account> fetchByTelegramId(Long... values) {
        return fetch(Account.ACCOUNT.TELEGRAM_ID, values);
    }

    /**
     * Fetch a unique record that has <code>telegram_id = value</code>
     */
    public jooq.tables.pojos.Account fetchOneByTelegramId(Long value) {
        return fetchOne(Account.ACCOUNT.TELEGRAM_ID, value);
    }

    /**
     * Fetch a unique record that has <code>telegram_id = value</code>
     */
    public Optional<jooq.tables.pojos.Account> fetchOptionalByTelegramId(Long value) {
        return fetchOptional(Account.ACCOUNT.TELEGRAM_ID, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Account> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Account.ACCOUNT.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<jooq.tables.pojos.Account> fetchByFirstName(String... values) {
        return fetch(Account.ACCOUNT.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Account> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Account.ACCOUNT.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<jooq.tables.pojos.Account> fetchByLastName(String... values) {
        return fetch(Account.ACCOUNT.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Account> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Account.ACCOUNT.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<jooq.tables.pojos.Account> fetchByUserName(String... values) {
        return fetch(Account.ACCOUNT.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>birthday BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Account> fetchRangeOfBirthday(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Account.ACCOUNT.BIRTHDAY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>birthday IN (values)</code>
     */
    public List<jooq.tables.pojos.Account> fetchByBirthday(LocalDateTime... values) {
        return fetch(Account.ACCOUNT.BIRTHDAY, values);
    }
}
